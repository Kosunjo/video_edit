# This viminfo file was generated by Vim 9.0.
# You may edit it if you're careful!

# Viminfo version
|1,4

# Value of 'encoding' when this file was written
*encoding=utf-8


# hlsearch on (H) or off (h):
~H
# Last Search Pattern:
~MSle0~/\V\<use\>

# Command Line History (newest to oldest):
:wq
|2,0,1754547678,,"wq"
:w
|2,0,1754547166,,"w"
:q!
|2,0,1754533559,,"q!"

# Search String History (newest to oldest):

# Expression History (newest to oldest):

# Input Line History (newest to oldest):

# Debug Line History (newest to oldest):

# Registers:
""1	LINE	0
	from flask import Flask, jsonify, request
	import json
	import boto3
	import logging
	from botocore.exceptions import ClientError
	from botocore.config import Config  # 이 줄 추가
	from flask_cors import CORS
	
	app = Flask(__name__)
	CORS(app, resources={r'/api/*': {'origins': 'http://43.200.6.54:5003'}})
	
	@app.route('/api/v1/s3_input', methods=['POST'])
	def s3_upload():
	
	    # AWS4-HMAC-SHA256 서명 방식 사용
	    s3 = boto3.client('s3', config=Config(signature_version='s3v4'))
	
	    bucket = "video-input-pipeline-20250724"
	    data = request.get_json()
	    filename = data.get('filename')
	    content_type = data.get('contentType')
	
	    if not content_type:
	        return jsonify({"error": "contentType is required"}), 400
	
	    try:
	        url = s3.generate_presigned_url(
	            ClientMethod="put_object",
	            Params= {"Bucket": bucket, "Key": filename, "ContentType": content_type},
	            ExpiresIn=1000
	        )
	    except ClientError as e:
	        logging.error(f"Couldn't generate presigned URL: {e}")
	        return jsonify({"error": "Could not generate URL"}), 500
	
	    return jsonify({"uploadUrl": url})
	
	if __name__ == "__main__":
	    app.run(debug=True, host='0.0.0.0', port=5000)
|3,1,1,1,39,0,1754547529,"from flask import Flask, jsonify, request","import json","import boto3","import logging","from botocore.exceptions import ClientError","from botocore.config import Config  # 이 줄 추가","from flask_cors import CORS","","app = Flask(__name__)","CORS(app, resources={r'/api/*': {'origins': 'http://43.200.6.54:5003'}})","","@app.route('/api/v1/s3_input', methods=['POST'])","def s3_upload():","",>45
|<"    # AWS4-HMAC-SHA256 서명 방식 사용","    s3 = boto3.client('s3', config=Config(signature_version='s3v4'))","","    bucket = \"video-input-pipeline-20250724\"","    data = request.get_json()","    filename = data.get('filename')","    content_type = data.get('contentType')","","    if not content_type:","        return jsonify({\"error\": \"contentType is required\"}), 400","","    try:","        url = s3.generate_presigned_url(","            ClientMethod=\"put_object\",",>93
|<"            Params= {\"Bucket\": bucket, \"Key\": filename, \"ContentType\": content_type},","            ExpiresIn=1000","        )","    except ClientError as e:","        logging.error(f\"Couldn't generate presigned URL: {e}\")","        return jsonify({\"error\": \"Could not generate URL\"}), 500","","    return jsonify({\"uploadUrl\": url})","","if __name__ == \"__main__\":","    app.run(debug=True, host='0.0.0.0', port=5000)"
"2	LINE	0
	"use client"
	
	import { useState } from "react"
	import { Button } from "@/components/ui/button"
	import Image from "next/image"
	import Link from "next/link"
	import { useRef } from "react"
	
	export default function MainPage() {
	  const fileInputRef = useRef<HTMLInputElement>(null)
	
	  const handleButtonClick = () => {
	    fileInputRef.current?.click()
	  }
	
	  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
	    try {
	      console.log("파일 선택 이벤트 시작")
	      
	      const files = event.target.files
	      if (!files || files.length === 0) {
	        console.log("파일이 선택되지 않음")
	        return
	      }
	
	      const selectedFile = files[0]
	      console.log("선택된 비디오 파일:", selectedFile.name)
	      console.log("파일 타입:", selectedFile.type)
	      console.log("파일 크기:", selectedFile.size)
	
	      // 백엔드에서 S3 presigned URL 요청
	      console.log("Presigned URL 요청 시작")
	      const res = await fetch("http://43.200.6.54:5001/api/v1/s3_input", {
	        method: "POST",
	        headers: {
	          "Content-Type": "application/json"
	        },
	        body: JSON.stringify({ 
	          filename: selectedFile.name, 
	          contentType: "video/mp4" 
	        })
	      })
	      
	      console.log("Presigned URL 응답:", res.status)
	      
	      if (!res.ok) {
	        const errorText = await res.text()
	        console.error("Presigned URL 요청 실패:", errorText)
	        alert("Presigned URL 요청 실패!")
	        return
|3,0,2,1,50,0,1754547162,"\"use client\"","","import { useState } from \"react\"","import { Button } from \"@/components/ui/button\"","import Image from \"next/image\"","import Link from \"next/link\"","import { useRef } from \"react\"","","export default function MainPage() {","  const fileInputRef = useRef<HTMLInputElement>(null)","","  const handleButtonClick = () => {","    fileInputRef.current?.click()","  }","",>84
|<"  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {","    try {","      console.log(\"파일 선택 이벤트 시작\")","      ","      const files = event.target.files","      if (!files || files.length === 0) {","        console.log(\"파일이 선택되지 않음\")","        return","      }","","      const selectedFile = files[0]","      console.log(\"선택된 비디오 파일:\", selectedFile.name)",>58
|<"      console.log(\"파일 타입:\", selectedFile.type)","      console.log(\"파일 크기:\", selectedFile.size)","","      // 백엔드에서 S3 presigned URL 요청","      console.log(\"Presigned URL 요청 시작\")","      const res = await fetch(\"http://43.200.6.54:5001/api/v1/s3_input\", {","        method: \"POST\",","        headers: {","          \"Content-Type\": \"application/json\"","        },","        body: JSON.stringify({ ",>41
|<"          filename: selectedFile.name, ","          contentType: \"video/mp4\" ","        })","      })","      ","      console.log(\"Presigned URL 응답:\", res.status)","      ","      if (!res.ok) {","        const errorText = await res.text()","        console.error(\"Presigned URL 요청 실패:\", errorText)","        alert(\"Presigned URL 요청 실패!\")","        return"
"3	LINE	0
	from flask import Flask, jsonify, request
	import json
	import boto3
	import logging
	from botocore.exceptions import ClientError
	from flask_cors import CORS
	
	app = Flask(__name__)
	CORS(app, resources={r'/api/*': {'origins': 'http://43.200.6.54:5003'}})
	
	@app.route('/api/v1/s3_input', methods=['POST'])
	def s3_upload():
	
	    s3 = boto3.client('s3')
	
	    bucket = "video-input-pipeline-20250724"
	    data = request.get_json()
	    filename = data.get('filename')  
	    content_type = data.get('contentType')
	
	    if not content_type:
	        return jsonify({"error": "contentType is required"}), 400
	
	    try:
	        url = s3.generate_presigned_url(
	            ClientMethod="put_object",
	            Params= {"Bucket": bucket, "Key": filename, "ContentType": content_type},
	            ExpiresIn=1000
	        )
	    except ClientError as e:
	        logging.error(f"Couldn't generate presigned URL: {e}")
	        return jsonify({"error": "Could not generate URL"}), 500
	    
	    return jsonify({"uploadUrl": url})
	
	if __name__ == "__main__":
	    app.run(debug=True, host='0.0.0.0', port=5000)
|3,0,3,1,37,0,1754547057,"from flask import Flask, jsonify, request","import json","import boto3","import logging","from botocore.exceptions import ClientError","from flask_cors import CORS","","app = Flask(__name__)","CORS(app, resources={r'/api/*': {'origins': 'http://43.200.6.54:5003'}})","","@app.route('/api/v1/s3_input', methods=['POST'])","def s3_upload():","","    s3 = boto3.client('s3')","","    bucket = \"video-input-pipeline-20250724\"",>31
|<"    data = request.get_json()","    filename = data.get('filename')  ","    content_type = data.get('contentType')","","    if not content_type:","        return jsonify({\"error\": \"contentType is required\"}), 400","","    try:","        url = s3.generate_presigned_url(","            ClientMethod=\"put_object\",","            Params= {\"Bucket\": bucket, \"Key\": filename, \"ContentType\": content_type},","            ExpiresIn=1000","        )","    except ClientError as e:",>66
|<"        logging.error(f\"Couldn't generate presigned URL: {e}\")","        return jsonify({\"error\": \"Could not generate URL\"}), 500","    ","    return jsonify({\"uploadUrl\": url})","","if __name__ == \"__main__\":","    app.run(debug=True, host='0.0.0.0', port=5000)"
"4	LINE	0
	"use client"
	
	import { useState } from "react"
	import { Button } from "@/components/ui/button"
	import Image from "next/image"
	import Link from "next/link"
	import { useRef } from "react"
	
	export default function MainPage() {
	  const fileInputRef = useRef<HTMLInputElement>(null)
	
	  const handleButtonClick = () => {
	    fileInputRef.current?.click()
	  }
	
	  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
	    try {
	      console.log("파일 선택 이벤트 시작")
	      
	      const files = event.target.files
	      if (!files || files.length === 0) {
	        console.log("파일이 선택되지 않음")
	        return
	      }
	
	      const selectedFile = files[0]
	      console.log("선택된 비디오 파일:", selectedFile.name)
	      console.log("파일 타입:", selectedFile.type)
	      console.log("파일 크기:", selectedFile.size)
	
	      // 백엔드에서 S3 presigned URL 요청
	      console.log("Presigned URL 요청 시작")
	      const res = await fetch("http://43.200.6.54:5001/api/v1/s3_input", {
	        method: "POST",
	        headers: {
	          "Content-Type": "application/json"
	        },
	        body: JSON.stringify({ 
	          filename: selectedFile.name, 
	          contentType: "video/mp4" 
	        })
	      })
	      
	      console.log("Presigned URL 응답:", res.status)
	      
	      if (!res.ok) {
	        const errorText = await res.text()
	        console.error("Presigned URL 요청 실패:", errorText)
	        alert("Presigned URL 요청 실패!")
	        return
|3,0,4,1,50,0,1754546804,"\"use client\"","","import { useState } from \"react\"","import { Button } from \"@/components/ui/button\"","import Image from \"next/image\"","import Link from \"next/link\"","import { useRef } from \"react\"","","export default function MainPage() {","  const fileInputRef = useRef<HTMLInputElement>(null)","","  const handleButtonClick = () => {","    fileInputRef.current?.click()","  }","",>84
|<"  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {","    try {","      console.log(\"파일 선택 이벤트 시작\")","      ","      const files = event.target.files","      if (!files || files.length === 0) {","        console.log(\"파일이 선택되지 않음\")","        return","      }","","      const selectedFile = files[0]","      console.log(\"선택된 비디오 파일:\", selectedFile.name)",>58
|<"      console.log(\"파일 타입:\", selectedFile.type)","      console.log(\"파일 크기:\", selectedFile.size)","","      // 백엔드에서 S3 presigned URL 요청","      console.log(\"Presigned URL 요청 시작\")","      const res = await fetch(\"http://43.200.6.54:5001/api/v1/s3_input\", {","        method: \"POST\",","        headers: {","          \"Content-Type\": \"application/json\"","        },","        body: JSON.stringify({ ",>41
|<"          filename: selectedFile.name, ","          contentType: \"video/mp4\" ","        })","      })","      ","      console.log(\"Presigned URL 응답:\", res.status)","      ","      if (!res.ok) {","        const errorText = await res.text()","        console.error(\"Presigned URL 요청 실패:\", errorText)","        alert(\"Presigned URL 요청 실패!\")","        return"
"5	LINE	0
	dGuse client"
	
	import { useState } from "react"
	import { Button } from "@/components/ui/button"
	import Image from "next/image"
	import Link from "next/link"
	import { useRef } from "react"
	
	export default function MainPage() {
	  const fileInputRef = useRef<HTMLInputElement>(null)
	
	  const handleButtonClick = () => {
	    fileInputRef.current?.click()
	  }
	
	  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
	    try {
	      console.log("파일 선택 이벤트 시작")
	      
	      const files = event.target.files
	      if (!files || files.length === 0) {
	        console.log("파일이 선택되지 않음")
	        return
	      }
	
	      const selectedFile = files[0]
	      console.log("선택된 비디오 파일:", selectedFile.name)
	      console.log("파일 타입:", selectedFile.type)
	      console.log("파일 크기:", selectedFile.size)
	
	      // 백엔드에서 S3 presigned URL 요청
	      console.log("Presigned URL 요청 시작")
	      const res = await fetch("http://43.200.6.54:5001/api/v1/s3_input", {
	        method: "POST",
	        headers: {
	          "Content-Type": "application/json"
	        },
	        body: JSON.stringify({ 
	          filename: selectedFile.name, 
	          contentType: "video/mp4" 
	        })
	      })
	      
	      console.log("Presigned URL 응답:", res.status)
	      
	      if (!res.ok) {
	        const errorText = await res.text()
	        console.error("Presigned URL 요청 실패:", errorText)
	        alert("Presigned URL 요청 실패!")
	        return
|3,0,5,1,50,0,1754546383,"dGuse client\"","","import { useState } from \"react\"","import { Button } from \"@/components/ui/button\"","import Image from \"next/image\"","import Link from \"next/link\"","import { useRef } from \"react\"","","export default function MainPage() {","  const fileInputRef = useRef<HTMLInputElement>(null)","","  const handleButtonClick = () => {","    fileInputRef.current?.click()","  }","",>84
|<"  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {","    try {","      console.log(\"파일 선택 이벤트 시작\")","      ","      const files = event.target.files","      if (!files || files.length === 0) {","        console.log(\"파일이 선택되지 않음\")","        return","      }","","      const selectedFile = files[0]","      console.log(\"선택된 비디오 파일:\", selectedFile.name)",>58
|<"      console.log(\"파일 타입:\", selectedFile.type)","      console.log(\"파일 크기:\", selectedFile.size)","","      // 백엔드에서 S3 presigned URL 요청","      console.log(\"Presigned URL 요청 시작\")","      const res = await fetch(\"http://43.200.6.54:5001/api/v1/s3_input\", {","        method: \"POST\",","        headers: {","          \"Content-Type\": \"application/json\"","        },","        body: JSON.stringify({ ",>41
|<"          filename: selectedFile.name, ","          contentType: \"video/mp4\" ","        })","      })","      ","      console.log(\"Presigned URL 응답:\", res.status)","      ","      if (!res.ok) {","        const errorText = await res.text()","        console.error(\"Presigned URL 요청 실패:\", errorText)","        alert(\"Presigned URL 요청 실패!\")","        return"
"6	LINE	0
	"use client"
	
	import { useState } from "react"
	import { Button } from "@/components/ui/button"
	import Image from "next/image"
	import Link from "next/link"
	import { useRef } from "react"
	
	export default function MainPage() {
	  const fileInputRef = useRef<HTMLInputElement>(null)
	
	  const handleButtonClick = () => {
	    fileInputRef.current?.click()
	  }
	
	  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
	    try {
	      const files = event.target.files
	      if (!files || files.length === 0) return
	
	      const selectedFile = files[0]
	      console.log("선택된 비디오 파일:", selectedFile.name)
	      console.log("파일 타입:", selectedFile.type)
	      console.log("파일 크기:", selectedFile.size)
	
	      // 백엔드에서 S3 presigned URL 요청
	      const res = await fetch("http://43.200.6.54:5001/api/v1/s3_input", {
	        method: "POST",
	        headers: {
	          "Content-Type": "application/json"
	        },
	        body: JSON.stringify({ 
	          filename: selectedFile.name, 
	          contentType: "video/mp4" 
	        })
	      })
	      
	      console.log("Presigned URL 응답:", res.status)
	      
	      if (!res.ok) {
	        const errorText = await res.text()
	        console.error("Presigned URL 요청 실패:", errorText)
	        alert("Presigned URL 요청 실패!")
	        return
	      }
	      
	      const { uploadUrl } = await res.json()
	      console.log("Presigned URL:", uploadUrl)
	
	      // presigned URL로 S3 업로드
|3,0,6,1,50,0,1754546109,"\"use client\"","","import { useState } from \"react\"","import { Button } from \"@/components/ui/button\"","import Image from \"next/image\"","import Link from \"next/link\"","import { useRef } from \"react\"","","export default function MainPage() {","  const fileInputRef = useRef<HTMLInputElement>(null)","","  const handleButtonClick = () => {","    fileInputRef.current?.click()","  }","",>84
|<"  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {","    try {","      const files = event.target.files","      if (!files || files.length === 0) return","","      const selectedFile = files[0]","      console.log(\"선택된 비디오 파일:\", selectedFile.name)","      console.log(\"파일 타입:\", selectedFile.type)","      console.log(\"파일 크기:\", selectedFile.size)","","      // 백엔드에서 S3 presigned URL 요청",>78
|<"      const res = await fetch(\"http://43.200.6.54:5001/api/v1/s3_input\", {","        method: \"POST\",","        headers: {","          \"Content-Type\": \"application/json\"","        },","        body: JSON.stringify({ ","          filename: selectedFile.name, ","          contentType: \"video/mp4\" ","        })","      })","      ","      console.log(\"Presigned URL 응답:\", res.status)","      ","      if (!res.ok) {","        const errorText = await res.text()",>68
|<"        console.error(\"Presigned URL 요청 실패:\", errorText)","        alert(\"Presigned URL 요청 실패!\")","        return","      }","      ","      const { uploadUrl } = await res.json()","      console.log(\"Presigned URL:\", uploadUrl)","","      // presigned URL로 S3 업로드"
"7	LINE	0
	"use client"
	
	import { useState } from "react"
	import { Button } from "@/components/ui/button"
	import Image from "next/image"
	import Link from "next/link"
	import { useRef } from "react"
	
	export default function MainPage() {
	  const fileInputRef = useRef<HTMLInputElement>(null)
	
	  const handleButtonClick = () => {
	    fileInputRef.current?.click()
	  }
	
	  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
	    const files = event.target.files
	    if (!files || files.length === 0) return
	
	    const selectedFile = files[0]
	    console.log("선택된 비디오 파일:", selectedFile.name)
	    console.log("파일 타입:", selectedFile.type)
	    console.log("파일 크기:", selectedFile.size)
	
	    // 백엔드에서 S3 presigned URL 요청
	    const res = await fetch("http://43.200.6.54:5001/api/v1/s3_input", {
	      method: "POST",
	      headers: {
	        "Content-Type": "application/json"
	      },
	      body: JSON.stringify({ 
	        filename: selectedFile.name, 
	        contentType: "video/mp4" 
	      })
	    })
	    console.log(res)
	    const { uploadUrl } = await res.json()
	
	    // presigned URL로 S3 업로드
	    const uploadRes = await fetch(uploadUrl, {
	      method: "PUT",
	      body: selectedFile,
	      headers: {
	        "Content-Type": "video/mp4"
	      }
	    })
	
	    if (uploadRes.ok) {
	      alert("비디오 업로드 완료!")
	    } else {
|3,0,7,1,50,0,1754545919,"\"use client\"","","import { useState } from \"react\"","import { Button } from \"@/components/ui/button\"","import Image from \"next/image\"","import Link from \"next/link\"","import { useRef } from \"react\"","","export default function MainPage() {","  const fileInputRef = useRef<HTMLInputElement>(null)","","  const handleButtonClick = () => {","    fileInputRef.current?.click()","  }","",>84
|<"  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {","    const files = event.target.files","    if (!files || files.length === 0) return","","    const selectedFile = files[0]","    console.log(\"선택된 비디오 파일:\", selectedFile.name)","    console.log(\"파일 타입:\", selectedFile.type)","    console.log(\"파일 크기:\", selectedFile.size)","","    // 백엔드에서 S3 presigned URL 요청",>76
|<"    const res = await fetch(\"http://43.200.6.54:5001/api/v1/s3_input\", {","      method: \"POST\",","      headers: {","        \"Content-Type\": \"application/json\"","      },","      body: JSON.stringify({ ","        filename: selectedFile.name, ","        contentType: \"video/mp4\" ","      })","    })","    console.log(res)","    const { uploadUrl } = await res.json()","","    // presigned URL로 S3 업로드","    const uploadRes = await fetch(uploadUrl, {",>24
|<"      method: \"PUT\",","      body: selectedFile,","      headers: {","        \"Content-Type\": \"video/mp4\"","      }","    })","","    if (uploadRes.ok) {","      alert(\"비디오 업로드 완료!\")","    } else {"
"8	LINE	0
	"use client"
	
	import { useState } from "react"
	import { Button } from "@/components/ui/button"
	import Image from "next/image"
	import Link from "next/link"
	import { useRef } from "react"
	
	export default function MainPage() {
	  const fileInputRef = useRef<HTMLInputElement>(null)
	
	  const handleButtonClick = () => {
	    fileInputRef.current?.click()
	  }
	
	  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
	    const files = event.target.files
	    if (!files || files.length === 0) return
	
	    const selectedFile = files[0]
	    console.log("선택된 비디오 파일:", selectedFile.name)
	
	    // 백엔드에서 S3 presigned URL 요청
	    const res = await fetch("http://43.200.6.54:5001/api/v1/s3_input", {
	      method: "POST",
	      headers: {
	        "Content-Type": "application/json"
	      },
	      body: JSON.stringify({ 
	        filename: selectedFile.name, 
	        contentType: "video/mp4" 
	      })
	    })
	    console.log(res)
	    const { uploadUrl } = await res.json()
	
	    // presigned URL로 S3 업로드
	    const uploadRes = await fetch(uploadUrl, {
	      method: "PUT",
	      body: selectedFile
	      // Content-Type 헤더 제거 - URL에 이미 포함됨
	    })
	
	    if (uploadRes.ok) {
	      alert("비디오 업로드 완료!")
	    } else {
	      alert("업로드 실패!")
	    }
	  }
	
|3,0,8,1,50,0,1754545747,"\"use client\"","","import { useState } from \"react\"","import { Button } from \"@/components/ui/button\"","import Image from \"next/image\"","import Link from \"next/link\"","import { useRef } from \"react\"","","export default function MainPage() {","  const fileInputRef = useRef<HTMLInputElement>(null)","","  const handleButtonClick = () => {","    fileInputRef.current?.click()","  }","",>84
|<"  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {","    const files = event.target.files","    if (!files || files.length === 0) return","","    const selectedFile = files[0]","    console.log(\"선택된 비디오 파일:\", selectedFile.name)","","    // 백엔드에서 S3 presigned URL 요청","    const res = await fetch(\"http://43.200.6.54:5001/api/v1/s3_input\", {","      method: \"POST\",","      headers: {",>48
|<"        \"Content-Type\": \"application/json\"","      },","      body: JSON.stringify({ ","        filename: selectedFile.name, ","        contentType: \"video/mp4\" ","      })","    })","    console.log(res)","    const { uploadUrl } = await res.json()","","    // presigned URL로 S3 업로드","    const uploadRes = await fetch(uploadUrl, {","      method: \"PUT\",","      body: selectedFile","      // Content-Type 헤더 제거 - URL에 이미 포함됨","    })","",>25
|<"    if (uploadRes.ok) {","      alert(\"비디오 업로드 완료!\")","    } else {","      alert(\"업로드 실패!\")","    }","  }",""
"9	LINE	0
	"use client"
	
	import { useState } from "react"
	import { Button } from "@/components/ui/button"
	import Image from "next/image"
	import Link from "next/link"
	import { useRef } from "react"
	
	export default function MainPage() {
	  const fileInputRef = useRef<HTMLInputElement>(null)
	
	  const handleButtonClick = () => {
	    fileInputRef.current?.click()
	  }
	
	  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
	    const files = event.target.files
	    if (!files || files.length === 0) return
	
	    const selectedFile = files[0]
	    console.log("선택된 비디오 파일:", selectedFile.name)
	
	    // 백엔드에서 S3 presigned URL 요청
	    const res = await fetch("http://43.200.6.54:5001/api/v1/s3_input", {
	      method: "POST",
	      headers: {
	        "Content-Type": "application/json"
	      },
	      body: JSON.stringify({ 
	        filename: selectedFile.name, 
	        contentType: "video/mp4" 
	      })
	    })
	    console.log(res)
	    const { uploadUrl } = await res.json()
	
	    // presigned URL로 S3 업로드
	    const uploadRes = await fetch(uploadUrl, {
	      method: "PUT",
	      body: selectedFile
	      // Content-Type 헤더 제거 - URL에 이미 포함됨
	    })
	
	    if (uploadRes.ok) {
	      alert("비디오 업로드 완료!")
	    } else {
	      alert("업로드 실패!")
	    }
	  }
	
|3,0,9,1,50,0,1754535275,"\"use client\"","","import { useState } from \"react\"","import { Button } from \"@/components/ui/button\"","import Image from \"next/image\"","import Link from \"next/link\"","import { useRef } from \"react\"","","export default function MainPage() {","  const fileInputRef = useRef<HTMLInputElement>(null)","","  const handleButtonClick = () => {","    fileInputRef.current?.click()","  }","",>84
|<"  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {","    const files = event.target.files","    if (!files || files.length === 0) return","","    const selectedFile = files[0]","    console.log(\"선택된 비디오 파일:\", selectedFile.name)","","    // 백엔드에서 S3 presigned URL 요청","    const res = await fetch(\"http://43.200.6.54:5001/api/v1/s3_input\", {","      method: \"POST\",","      headers: {",>48
|<"        \"Content-Type\": \"application/json\"","      },","      body: JSON.stringify({ ","        filename: selectedFile.name, ","        contentType: \"video/mp4\" ","      })","    })","    console.log(res)","    const { uploadUrl } = await res.json()","","    // presigned URL로 S3 업로드","    const uploadRes = await fetch(uploadUrl, {","      method: \"PUT\",","      body: selectedFile","      // Content-Type 헤더 제거 - URL에 이미 포함됨","    })","",>25
|<"    if (uploadRes.ok) {","      alert(\"비디오 업로드 완료!\")","    } else {","      alert(\"업로드 실패!\")","    }","  }",""
"-	CHAR	0
	"
|3,0,36,0,1,0,1754546380,"\""

# File marks:
'0  41  49  ~/api/s3_upload/app.py
|4,48,41,49,1754547678,"~/api/s3_upload/app.py"
'1  41  49  ~/api/s3_upload/app.py
|4,49,41,49,1754547535,"~/api/s3_upload/app.py"
'2  284  0  ~/front_final/app/page.tsx
|4,50,284,0,1754547168,"~/front_final/app/page.tsx"
'3  1  49  ~/api/s3_upload/app.py
|4,51,1,49,1754547066,"~/api/s3_upload/app.py"
'4  39  49  ~/api/s3_upload/app.py
|4,52,39,49,1754547066,"~/api/s3_upload/app.py"
'5  1  49  ~/api/s3_upload/app.py
|4,53,1,49,1754547066,"~/api/s3_upload/app.py"
'6  39  49  ~/api/s3_upload/app.py
|4,54,39,49,1754547066,"~/api/s3_upload/app.py"
'7  1  12  ~/api/s3_upload/app.py
|4,55,1,12,1754547026,"~/api/s3_upload/app.py"
'8  1  12  ~/api/s3_upload/app.py
|4,56,1,12,1754547026,"~/api/s3_upload/app.py"
'9  1  12  ~/api/s3_upload/app.py
|4,57,1,12,1754547026,"~/api/s3_upload/app.py"

# Jumplist (newest first):
-'  41  49  ~/api/s3_upload/app.py
|4,39,41,49,1754547678,"~/api/s3_upload/app.py"
-'  41  49  ~/api/s3_upload/app.py
|4,39,41,49,1754547535,"~/api/s3_upload/app.py"
-'  1  40  ~/api/s3_upload/app.py
|4,39,1,40,1754547529,"~/api/s3_upload/app.py"
-'  1  40  ~/api/s3_upload/app.py
|4,39,1,40,1754547529,"~/api/s3_upload/app.py"
-'  284  0  ~/front_final/app/page.tsx
|4,39,284,0,1754547168,"~/front_final/app/page.tsx"
-'  284  0  ~/front_final/app/page.tsx
|4,39,284,0,1754547168,"~/front_final/app/page.tsx"
-'  284  0  ~/front_final/app/page.tsx
|4,39,284,0,1754547168,"~/front_final/app/page.tsx"
-'  284  0  ~/front_final/app/page.tsx
|4,39,284,0,1754547168,"~/front_final/app/page.tsx"
-'  1  0  ~/front_final/app/page.tsx
|4,39,1,0,1754547162,"~/front_final/app/page.tsx"
-'  1  0  ~/front_final/app/page.tsx
|4,39,1,0,1754547162,"~/front_final/app/page.tsx"
-'  1  0  ~/front_final/app/page.tsx
|4,39,1,0,1754547162,"~/front_final/app/page.tsx"
-'  1  0  ~/front_final/app/page.tsx
|4,39,1,0,1754547162,"~/front_final/app/page.tsx"
-'  39  49  ~/api/s3_upload/app.py
|4,39,39,49,1754547066,"~/api/s3_upload/app.py"
-'  39  49  ~/api/s3_upload/app.py
|4,39,39,49,1754547066,"~/api/s3_upload/app.py"
-'  39  49  ~/api/s3_upload/app.py
|4,39,39,49,1754547066,"~/api/s3_upload/app.py"
-'  1  0  ~/api/s3_upload/app.py
|4,39,1,0,1754547057,"~/api/s3_upload/app.py"
-'  1  0  ~/api/s3_upload/app.py
|4,39,1,0,1754547057,"~/api/s3_upload/app.py"
-'  27  12  ~/api/s3_upload/app.py
|4,39,27,12,1754547026,"~/api/s3_upload/app.py"
-'  27  12  ~/api/s3_upload/app.py
|4,39,27,12,1754547026,"~/api/s3_upload/app.py"
-'  27  12  ~/api/s3_upload/app.py
|4,39,27,12,1754547026,"~/api/s3_upload/app.py"
-'  281  0  ~/front_final/app/page.tsx
|4,39,281,0,1754546816,"~/front_final/app/page.tsx"
-'  281  0  ~/front_final/app/page.tsx
|4,39,281,0,1754546816,"~/front_final/app/page.tsx"
-'  281  0  ~/front_final/app/page.tsx
|4,39,281,0,1754546816,"~/front_final/app/page.tsx"
-'  281  0  ~/front_final/app/page.tsx
|4,39,281,0,1754546816,"~/front_final/app/page.tsx"
-'  281  0  ~/front_final/app/page.tsx
|4,39,281,0,1754546816,"~/front_final/app/page.tsx"
-'  281  0  ~/front_final/app/page.tsx
|4,39,281,0,1754546816,"~/front_final/app/page.tsx"
-'  281  0  ~/front_final/app/page.tsx
|4,39,281,0,1754546816,"~/front_final/app/page.tsx"
-'  281  0  ~/front_final/app/page.tsx
|4,39,281,0,1754546816,"~/front_final/app/page.tsx"
-'  281  0  ~/front_final/app/page.tsx
|4,39,281,0,1754546816,"~/front_final/app/page.tsx"
-'  281  0  ~/front_final/app/page.tsx
|4,39,281,0,1754546816,"~/front_final/app/page.tsx"
-'  281  0  ~/front_final/app/page.tsx
|4,39,281,0,1754546816,"~/front_final/app/page.tsx"
-'  281  0  ~/front_final/app/page.tsx
|4,39,281,0,1754546816,"~/front_final/app/page.tsx"
-'  281  0  ~/front_final/app/page.tsx
|4,39,281,0,1754546816,"~/front_final/app/page.tsx"
-'  281  0  ~/front_final/app/page.tsx
|4,39,281,0,1754546816,"~/front_final/app/page.tsx"
-'  281  0  ~/front_final/app/page.tsx
|4,39,281,0,1754546816,"~/front_final/app/page.tsx"
-'  281  0  ~/front_final/app/page.tsx
|4,39,281,0,1754546816,"~/front_final/app/page.tsx"
-'  1  0  ~/front_final/app/page.tsx
|4,39,1,0,1754546804,"~/front_final/app/page.tsx"
-'  1  0  ~/front_final/app/page.tsx
|4,39,1,0,1754546804,"~/front_final/app/page.tsx"
-'  1  0  ~/front_final/app/page.tsx
|4,39,1,0,1754546804,"~/front_final/app/page.tsx"
-'  1  0  ~/front_final/app/page.tsx
|4,39,1,0,1754546804,"~/front_final/app/page.tsx"
-'  1  0  ~/front_final/app/page.tsx
|4,39,1,0,1754546804,"~/front_final/app/page.tsx"
-'  1  0  ~/front_final/app/page.tsx
|4,39,1,0,1754546804,"~/front_final/app/page.tsx"
-'  1  0  ~/front_final/app/page.tsx
|4,39,1,0,1754546804,"~/front_final/app/page.tsx"
-'  1  0  ~/front_final/app/page.tsx
|4,39,1,0,1754546804,"~/front_final/app/page.tsx"
-'  1  0  ~/front_final/app/page.tsx
|4,39,1,0,1754546804,"~/front_final/app/page.tsx"
-'  1  0  ~/front_final/app/page.tsx
|4,39,1,0,1754546804,"~/front_final/app/page.tsx"
-'  1  0  ~/front_final/app/page.tsx
|4,39,1,0,1754546804,"~/front_final/app/page.tsx"
-'  1  0  ~/front_final/app/page.tsx
|4,39,1,0,1754546804,"~/front_final/app/page.tsx"
-'  1  0  ~/front_final/app/page.tsx
|4,39,1,0,1754546804,"~/front_final/app/page.tsx"
-'  1  0  ~/front_final/app/page.tsx
|4,39,1,0,1754546804,"~/front_final/app/page.tsx"
-'  1  0  ~/front_final/app/page.tsx
|4,39,1,0,1754546804,"~/front_final/app/page.tsx"
-'  1  0  ~/front_final/app/page.tsx
|4,39,1,0,1754546804,"~/front_final/app/page.tsx"
-'  27  12  ~/api/s3_upload/app.py
|4,39,27,12,1754546720,"~/api/s3_upload/app.py"
-'  27  12  ~/api/s3_upload/app.py
|4,39,27,12,1754546720,"~/api/s3_upload/app.py"
-'  27  12  ~/api/s3_upload/app.py
|4,39,27,12,1754546720,"~/api/s3_upload/app.py"
-'  27  12  ~/api/s3_upload/app.py
|4,39,27,12,1754546720,"~/api/s3_upload/app.py"
-'  27  53  ~/api/s3_upload/app.py
|4,39,27,53,1754546691,"~/api/s3_upload/app.py"
-'  27  53  ~/api/s3_upload/app.py
|4,39,27,53,1754546691,"~/api/s3_upload/app.py"
-'  27  53  ~/api/s3_upload/app.py
|4,39,27,53,1754546691,"~/api/s3_upload/app.py"
-'  27  53  ~/api/s3_upload/app.py
|4,39,27,53,1754546691,"~/api/s3_upload/app.py"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"
-'  278  0  ~/front_final/app/page.tsx
|4,39,278,0,1754546389,"~/front_final/app/page.tsx"

# History of marks within files (newest to oldest):

> ~/api/s3_upload/app.py
	*	1754547677	0
	"	41	49
	^	41	50
	.	41	49
	+	1	0
	+	1	41
	+	41	49

> ~/front_final/app/page.tsx
	*	1754547166	0
	"	284	0
	^	284	0
	.	283	1
	+	1	12
	+	520	1
	+	302	1
	+	1	12
	+	1	1
	+	1	12
	+	1	1
	+	1	12
	+	283	1

> ~/front_final/app/video-result/page.tsx
	*	1754534505	0
	"	83	58
	^	83	59
	.	83	58
	+	1	12
	+	1	1
	+	1	13
	+	1	0
	+	1	12
	+	251	1
	+	83	58

> ~/front_final/Dockerfile
	*	1754534254	0
	"	42	7
	^	42	8
	.	42	7
	+	44	9
	+	42	7

> ~/front_final/components/settings-panel.tsx
	*	1754533683	0
	"	48	0
	^	227	2
	.	227	1
	+	1	12
	+	227	1

> ~/front_final/app/video-result/pa
	*	1754532258	0
	"	1	0
